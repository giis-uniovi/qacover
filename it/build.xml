<project default="test-sequential"  basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless" >
<description>Execution of integration tests, outside of the parent pom context</description>

	<condition property="isWindows" value="true">
		<os family="windows"/>
	</condition>
	<property name="shell" value="cmd" if:set="isWindows" />
	<property name="shell" value="bash" unless:set="isWindows" />
	<property name="maven" value="mvn" if:set="isWindows" />
	<property name="maven" value="/usr/bin/mvn" unless:set="isWindows" />
	<!-- Reads the project version into a property project.version to later ensure that all artifacts are the tested version -->
	<xmlproperty file="../pom.xml" />
	<echo>Integration tests, parent pom version: ${project.version}</echo>
	
	<!-- Entry point for individual steps -->
	<target name="install" ><install/></target>
	<target name="spring-petclinic" ><spring-petclinic/></target>
	<target name="qacover-api" ><qacover-api/></target>
	<target name="install-uber" ><install-uber/></target>
	<target name="qacover-uber" ><qacover-uber/></target>
	
	<!-- Entry point for everything, the first install may be not needed, but ensures this script is standalone -->
	<target name="test-sequential" depends="install,spring-petclinic,qacover-api,install-uber,qacover-uber" >
	</target>

	<!-- Entry point for everything with parallel execution -->
	<target name="test-parallel" >
		<install/>
		<parallel>
			<spring-petclinic/>
			<sequential>
				<qacover-api/>
				<install-uber/>
				<qacover-uber/>
			</sequential>
		</parallel>
	</target>

	<macrodef name="install">
	  <sequential>
		<echo>*******************************</echo>
		<echo>*** INSTALLING DEPENDENCIES ***</echo>
		<echo>*******************************</echo>
		<mvn folder=".." arg1="install" arg2="-DskipTests=true" />
	  </sequential>
	</macrodef>
	
	<macrodef name="spring-petclinic">
	  <sequential>
		<!--
		Full execution of a spring project that includes qacover-core as dependency.
		Ensures that artifacts are the right version, executes tests and generate reports from commandline
		NOTE: Maven install must be executed with uber generation profile deactivated,
		if not, the test fail, why?
		-->
		<echo>*************************************</echo>
		<echo>*** RUNNING SPRING-PETCLINIC-MAIN ***</echo>
		<echo>*************************************</echo>
		<mvn folder="spring-petclinic-main" arg1="versions:set" arg2="-DnewVersion=${project.version}" />
		<delete dir="spring-petclinic-main/target" />
		<mvn folder="spring-petclinic-main" arg1="clean" arg2="test" />
		<report rules="spring-petclinic-main/target/qacover/rules" reports="spring-petclinic-main/target/qacover/reports" />
		<echo>*** END RUNNING SPRING-PETCLINIC-MAIN ***</echo>
	  </sequential>
	</macrodef>
			
	<macrodef name="qacover-api" >
	  <sequential>
		<echo>******************************</echo>
		<echo>*** RUNNING QACOVER AS API ***</echo>
		<echo>******************************</echo>
		<!--
		Execution of a project that only includes qacover-model as dependency,
		using it as an api to access data from previously generated rules.
		Requires the rules and schemas generated by TestReport at ut as input (placec it in test resources)
		-->
		<mvn folder="qacover-api-sample" arg1="versions:set" arg2="-DnewVersion=${project.version}" />
		<delete dir="qacover-api-sample/target" />
		<mvn folder="qacover-api-sample" arg1="clean" arg2="test" />
		<echo>*** END RUNNING QACOVER AS API ***</echo>
	  </sequential>
	</macrodef>	

	<macrodef name="install-uber">
	  <sequential>
		<echo>***************************</echo>
		<echo>*** INSTALLING UBER JAR ***</echo>
		<echo>***************************</echo>
		<!-- Only packages the uber jar to target folder -->
		<mvn folder=".." arg2="package" arg3="-DskipTests=true" arg4="-P" arg5="uber" arg6="-pl" arg7="qacover-core" />
		<echo>*** END INSTALLING UBER JAR ***</echo>
	  </sequential>
	</macrodef>
	
	<macrodef name="qacover-uber">
	  <sequential>
		<!--
		Execution of a java standalone jar that does not include qacover-core as dependency,
		but adds the qacover uber jar to its classpath.
		Executes the jar and generates reports from the commandline
		-->
		<echo>*********************************</echo>
		<echo>*** RUNNING QACOVER-UBER-MAIN ***</echo>
		<echo>*********************************</echo>
		<delete dir="qacover-uber-main/target" />
		<delete dir="qacover-uber-main/target" />
		<mkdir dir="qacover-uber-main/target/lib" />
		<get src="https://repo1.maven.org/maven2/org/xerial/sqlite-jdbc/3.36.0.3/sqlite-jdbc-3.36.0.3.jar" dest="qacover-uber-main/target/lib/sqlite-jdbc.jar"/>
		<get src="https://repo1.maven.org/maven2/org/apache/logging/log4j/log4j-slf4j-impl/2.17.2/log4j-slf4j-impl-2.17.2.jar" dest="qacover-uber-main/target/lib/log4j-slf4j-impl.jar"/>
		<get src="https://repo1.maven.org/maven2/org/apache/logging/log4j/log4j-core/2.17.2/log4j-core-2.17.2.jar" dest="qacover-uber-main/target/lib/log4j-core.jar"/>
		<get src="https://repo1.maven.org/maven2/org/apache/logging/log4j/log4j-api/2.17.2/log4j-api-2.17.2.jar" dest="qacover-uber-main/target/lib/log4j-api.jar"/>
		<get src="https://repo1.maven.org/maven2/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar" dest="qacover-uber-main/target/lib/slf4j-api.jar"/>
		<javac srcdir="qacover-uber-main" destdir="qacover-uber-main/target" />
		<java classname="TestUber" fork="true">
			<classpath>
				<pathelement path="qacover-uber-main"/>
				<pathelement path="qacover-uber-main/target"/>
				<pathelement location="../qacover-core/target/qacover-core-${project.version}-uber.jar"/>
				<pathelement location="qacover-uber-main/target/lib/slf4j-api.jar"/>
				<pathelement location="qacover-uber-main/target/lib/log4j-slf4j-impl.jar"/>
				<pathelement location="qacover-uber-main/target/lib/log4j-core.jar"/>
				<pathelement location="qacover-uber-main/target/lib/log4j-api.jar"/>
				<pathelement location="qacover-uber-main/target/lib/sqlite-jdbc.jar"/>
			</classpath>
		</java>
		<report rules="qacover-uber-main/target/qacover/rules" reports="qacover-uber-main/target/qacover/reports" />
		<echo>*** END RUNNING QACOVER-UBER-MAIN ***</echo>
	  </sequential>
	</macrodef>
	
	<macrodef name="mvn" xmlns:unless="ant:unless" >
	    <attribute name="folder" description="folder where the pom.xml is located" />
	    <attribute name="arg1" default="" />
	    <attribute name="arg2" default="" />
	    <attribute name="arg3" default="" />
	    <attribute name="arg4" default="" />
	    <attribute name="arg5" default="" />
	    <attribute name="arg6" default="" />
	    <attribute name="arg7" default="" />
		<sequential>
			<echo message="*** Run maven with args: @{arg1} @{arg2} @{arg3} @{arg4} @{arg5} @{arg6} @{arg7}" />
			<exec executable="${shell}" dir="@{folder}" failonerror="true" >
				<arg value="/c" if:set="isWindows"/>
				<arg value="${maven}" />
				<arg value="-DskipITs=true" />
				<arg value="-Dmaven.javadoc.skip=true" />
				<arg value="--no-transfer-progress" />
				<arg value="@{arg1}" unless:blank="@{arg1}" />
				<arg value="@{arg2}" unless:blank="@{arg2}" />
				<arg value="@{arg3}" unless:blank="@{arg3}" />
				<arg value="@{arg4}" unless:blank="@{arg4}" />
				<arg value="@{arg5}" unless:blank="@{arg5}" />
				<arg value="@{arg6}" unless:blank="@{arg6}" />
				<arg value="@{arg7}" unless:blank="@{arg7}" />
			</exec>
		</sequential>
	</macrodef>
	<macrodef name="report">
	    <attribute name="rules" description="input folder with the rules" />
	    <attribute name="reports" description="output folder with generated reports" />
		<sequential>
			<echo message="*** Executing qacover-report.jar from @{rules} to @{reports}" />
			<mkdir dir="@{reports}" />
			<java jar="../qacover-model/target/qacover-model-${project.version}-report.jar" fork="true" failonerror="true" output="@{reports}/report.log">
				  <arg value="@{rules}" />
				  <arg value="@{reports}" />
			</java>
		</sequential>
	</macrodef>

</project>