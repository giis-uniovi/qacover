<project name="QaCover" default="sharpen" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless" xmlns:dn="antlib:org.apache.ant.dotnet" xmlns="antlib:org.apache.tools.ant">

	<description>Convert QaCover to C#</description>

  <!-- To prepare and publish to the GitHub package repository see build-nuget-prepare.sh in javiertuya/portable repo -->

  <macrodef name="runConvert" description="Execute the JavaToCSharp converter">
    <attribute name="input" />
    <attribute name="output" />
    <attribute name="mapping" default="" />
    <sequential>
      <delete>
        <fileset dir="@{output}" includes="*.cs" />
      </delete>
      <echo>Converting '@{input}' to '@{output}' - Mapping file: '@{mapping}'</echo>
      <!--<exec executable="JavaToCSharp-temp/JavaToCSharpCli/bin/Debug/net8.0/JavaToCSharpCli" failonerror="true">-->
      <exec executable="JavaToCSharpCli" failonerror="true">
        <arg value="--include-subdirectories" />
        <arg value="false" />
        <arg value="--start-interface-names-with-i" />
        <arg value="false" />
        <arg value="--add-using" />
        <arg value="converted.placeholder" />
        <arg value="--mappings-file" unless:blank="mapping" />
        <arg value="@{mapping}" unless:blank="mapping" />
        <arg value="dir" />
        <arg value="@{input}" />
        <arg value="@{output}" />
      </exec>
    </sequential>
  </macrodef>

  <target name="convert">
    <!-- Basic conversion and postprocessing of sources and tests (junit4 into nunit3) -->
    <runConvert input="../qacover-model/src/main/java/giis/qacover/model" output="QACover/Translated/Giis.Qacover.Model"  mapping="java-mapping.yml" />
    <runConvert input="../qacover-model/src/main/java/giis/qacover/reader" output="QACover/Translated/Giis.Qacover.Reader"  mapping="java-mapping.yml" />
    <runConvert input="../qacover-model/src/main/java/giis/qacover/report" output="QACover/Translated/Giis.Qacover.Report"  mapping="java-mapping.yml" />
    <runConvert input="../qacover-model/src/main/java/giis/qacover/storage" output="QACover/Translated/Giis.Qacover.Storage"  mapping="java-mapping.yml" />
    <runConvert input="../qacover-core/src/main/java/giis/qacover/core" output="QACover/Translated/Giis.Qacover.Core"  mapping="java-mapping.yml" />
    <runConvert input="../qacover-core/src/main/java/giis/qacover/core/services" output="QACover/Translated/Giis.Qacover.Core.Services"  mapping="java-mapping.yml" />

    <runConvert input="../qacover-core/src/test/java/test4giis/qacoverapp" output="QACoverTest/Translated/Test4giis.Qacoverapp"  mapping="java-mapping.yml" />
    <runConvert input="../qacover-core/src/test/java/test4giis/qacover" output="QACoverTest/Translated/Test4giis.Qacover"  mapping="java-mapping.yml" />
    <runConvert input="../qacover-core/src/test/java/test4giis/qacover/model" output="QACoverTest/Translated/Test4giis.Qacover.Model"  mapping="java-mapping.yml" />
    <runConvert input="../qacover-core/src/test/java/test4giis/qacover/sqlserver" output="QACoverTest/Translated/Test4giis.Qacover.Sqlserver"  mapping="java-mapping.yml" />
    <delete file="QACoverTest/Translated/Test4giis.Qacoverapp/AppBase.cs" />
    <delete file="QACoverTest/Translated/Test4giis.Qacoverapp/AppDbUtils.cs" />
    <delete file="QACoverTest/Translated/Test4giis.Qacoverapp/ConnectionFactory.cs" />
    <delete file="QACoverTest/Translated/Test4giis.Qacover/TestExecute.cs" />
    <delete file="QACoverTest/Translated/Test4giis.Qacover/TestMutation.cs" />
    <delete file="QACoverTest/Translated/Test4giis.Qacover.Sqlserver/TestSqlserverExecute.cs" />
    <delete file="QACoverTest/Translated/Test4giis.Qacover.Sqlserver/TestSqlserverMutation.cs" />

    <replace dir="." >
      <include name="*/Translated/**/*.cs" />
      <replacefilter token="Dictionary&lt;" value="Map&lt;" />
      <replacefilter token="Dictionary" value="Map" />
      <replacefilter token="Giis.Tdrules.Model.Io" value="Giis.Tdrules.Model.IO" />
      <replacefilter token="private static readonly long serialVersionUID" value="//private static readonly long serialVersionUID" />
      <replacefilter token="IllegalAccessError" value="InvalidOperationException" />
      <replacefilter token="public virtual string ToString()" value="public override string ToString()" />
      <replacefilter token="LoggerFactory.GetLogger(typeof(" value="Giis.Portable.Util.NLogUtil.GetLogger(typeof(" />
      <replacefilter token="Throwable" value="Exception" />
      <replacefilter token="Date timestamp" value="DateTime timestamp" />
      <replacefilter token="is Date;" value="is DateTime;" />
      <replacefilter token="System.@out.Println" value="System.Console.WriteLine" />

      <replacefilter token="java.sql.Date" value="Java.Sql.Date" />
      <replacefilter token=".Dispose()" value=".Close()" />

      <replacefilter token="e.GetMessage()" value="e.Message" />
      <replacefilter token=".length" value=".Length" />
      <replacefilter token=".ToUpperCase()" value=".ToUpper()" />

      <replacefilter token=".SetFramework(Framework.JUNIT4)" value="" />
      <replacefilter token="public TestName testName = new TestName();" value="" />
      <replacefilter token="testName.GetMethodName()" value="NUnit.Framework.TestContext.CurrentContext.Test.Name" />
      <replacefilter token="using Org.Hamcrest.MatcherAssert;" value="" />
      <replacefilter token="using Org.Hamcrest;" value="" />
      <replacefilter token="using Org.Junit.Assert;" value="" />
      <replacefilter token="using Org.Junit.Rules;" value="" />

      <!-- nunit requires the exact exception in assert throws, allows derived types -->
      <replacefilter token="Assert.Throws(typeof(Exception)" value="Assert.Throws(Is.InstanceOf(typeof(Exception))" />

      <replacefilter token="using converted.placeholder;" value="/////// THIS FILE HAS BEEN AUTOMATICALLY CONVERTED FROM THE JAVA SOURCES. DO NOT EDIT ///////" />
    </replace>

    <!-- IMPORTANT: On Java, interception is configured through the p6spy properties file.
      On .NET, it is configured throught the QACOVER_LISTENER_CLASS environment variable.
      For tests, it is changed directly in the source code -->
    <replace file="QACoverTest/Translated/Test4giis.Qacover/Base.cs" token="// PLACEHOLDER FOR .NET STATIC INITIALIZATION - DO NOT CHANGE"
             value="static Base() { Giis.Qacover.Driver.EventTrigger.SetListenerClassName(&quot;Giis.Qacover.Driver.EventListener&quot;); }" />

    <!-- Specific code patterns in individual files, make fail if no replacement to alert on changes in the source code -->
    <replace file="QACover/Translated/Giis.Qacover.Model/HistoryDao.cs" token=" params" value=" @params" failOnNoReplacements="true" />
    <replace file="QACover/Translated/Giis.Qacover.Reader/QueryReader.cs" token="string params" value="string @params" failOnNoReplacements="true" />
    <replace file="QACover/Translated/Giis.Qacover.Core/QueryStatement.cs" token="string[] params" value="string[] @params" failOnNoReplacements="true" />
    <replace file="QACover/Translated/Giis.Qacover.Storage/LocalStore.cs" token="files.size()" value="files.Count" failOnNoReplacements="true" />
    <replace file="QACover/Translated/Giis.Qacover.Storage/LocalStore.cs" token="files.Remove(" value="files.RemoveAt(" failOnNoReplacements="true" />
    <replace file="QACover/Translated/Giis.Qacover.Storage/LocalStore.cs" token="Collections.Sort(files)" value="((List&lt;string&gt;)files).Sort()" failOnNoReplacements="true" />
    <replace file="QACover/Translated/Giis.Qacover.Core.Services/StackLocator.cs" token=" stack.Count" value=" stack.Size()" failOnNoReplacements="true" />
    <replace file="QACover/Translated/Giis.Qacover.Core/IQueryStatementReader.cs" token="List&lt;" value="IList&lt;" failOnNoReplacements="true" />
    <replace file="QACover/Translated/Giis.Qacover.Core/RuleDriverMutation.cs" token="private List&lt;" value="private IList&lt;" failOnNoReplacements="true" />

    <replace file="QACoverTest/Translated/Test4giis.Qacover/Base.cs" token="Locale.SetDefault(" value="//Locale.SetDefault(" failOnNoReplacements="true" />
    <replace file="QACoverTest/Translated/Test4giis.Qacover/TestDataTypeFormats.cs" token="com.p6spy." value="//com.p6spy." failOnNoReplacements="true" />
    <replace file="QACoverTest/Translated/Test4giis.Qacover/SqlUtil.cs" token="(s.Length != 0)" value="(s.Length() != 0)" failOnNoReplacements="true" />

  </target>
</project>