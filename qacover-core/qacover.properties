#######################################################
# Configuration settings for QACover (Java and .NET)  #
#######################################################

# This file is read by QACover on startup.
# It must be placed in the classpath (e.g. src/main/resources) or in the project root folder

# Root folder
# Default: project folder (java) or solution folder (.NET)
# qacover.store.root=.

# Folder to store the generated rules (relative to the root folder)
# Default: target/qacover/rules (java), reports/qacover/rules (.NET)
# qacover.store.rules=target/qacover/rules

# Folder to store the generated reports (relative to the root folder)
# Default: target/qacover/reports (java), reports/qacover/reports (.NET)
# qacover.store.reports=target/qacover/reports

# Prefix of the packages/classes that must be ignored to detect the 
# interaction point (class, method and line in the application that executes the query)
# from the actual point in which the database framework executes the query.
# See the README.md for additional explanation
# This is an example suitable for executing the tests of QACover, 
# and the execution of queries using Apache Commons DbUtils, Spring Boot and .NET
qacover.stack.exclusions=test4giis.qacoverapp.AppBase,org.apache.commons.dbutils.,org.hibernate.,com.zaxxer.hikari.,Microsoft.EntityFramework,Z.EntityFramework

# Prefix of the packages or class names that must always be included even if they should be 
# excluded by the qacover.stack.exclusions property
qacover.stack.inclusions=

# Unconditionally skip the evaluation of the indicated packages/classes
# Useful to exclude classes that are not of interest or test data setup
qacover.class.exclusions=

# Unconditionally skip the evaluation of any query that contains at least one of the indicated tables (match is exact)
# This is an example that excludes queries that determine the own structure of the database and not are part of the business logic
qacover.table.exclusions.exact=dual,information_schema.tables,information_schema.columns,information_schema.sequences

# If true, transforms non parametrized queries into parametrized queries
# by converting each literal into a parameter
# Default: false
qacover.query.infer.parameters=false

# If true, once that a rule is covered once, it is not evaluated again
# Default: false
qacover.rule.optimize.evaluation=false

# Sets the coverage criterion to be used for the evaluation of the queries ran by the application
# Values: fpc (SQLFpc:Full Predicate Coverage), mutation (SQLMutation: Mutants for SQL)
# Default: fpc
qacover.rule.criterion=fpc

# Alternative endpoint of the TdRules service
# Default: empty
qacover.rule.url=

# Additional options to control the rule generation (separated by spaces)
# Default: empty
# Example for fpc: noboundaries notautology
# to do not generate rules for boundary values in numeric expressions 
# and supress rules that can be automatically detected as a tautology
qacover.rule.options=

# A folder to use as a cache of the rules that are generated
# Default: empty
qacover.rule.cache=

